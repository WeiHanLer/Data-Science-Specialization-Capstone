#
# This is the server logic of a Shiny web application. You can run the 
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
# 
#    http://shiny.rstudio.com/
#

suppressWarnings(library(stringr))
suppressWarnings(library(shiny))

# Load Quadgram,Trigram & Bigram Data frame files

ngram<- readRDS("ngram.RData");
mesg <<- ""

# Cleaning of user input before predicting the next word

PredictNext <- function(input){
  inp <- tolower(input)
  inp <- unlist(strsplit(as.character(inp), ' '))
  n <- length(inp) 
  if(length(ngram[ngram$gram==word(input,n-2,n),]) > 0){
    select<-ngram[ngram$gram==input,]
    return(as.character(head(select$pred,1)))} 
 else if(length(ngram[ngram$gram==word(input,n-1,n),]) > 0){
  select<-ngram[ngram$gram==input,]
  return(as.character(head(select$pred,1)))}
else if(length(ngram[ngram$gram==word(input,n,n),]) > 0){
  select<-ngram[ngram$gram==input,]
  return(as.character(head(select$pred,1)))}
else if(length(ngram[ngram$gram==word(input,n,n),]) == 0){
return("no matches found")}

}
  
  
  # Back Off Algorithm
  # Predict the next term of the user input sentence
  # 1. For prediction of the next word, Quadgram is first used (first three words of Quadgram are the last three words of the user provided sentence).
  # 2. If no Quadgram is found, back off to Trigram (first two words of Trigram are the last two words of the sentence).
  # 3. If no Trigram is found, back off to Bigram (first word of Bigram is the last word of the sentence)
  # 4. If no Bigram is found, back off to the most common word with highest frequency 'the' is returned.
  
  
  shinyServer(function(input, output) {
    output$prediction <- renderPrint({
      result <- PredictNext(input$inputString)
      output$text2 <- renderText({mesg})
      result
    });
    
    output$insert <- renderText({
      input$inputString});
  }
  )
